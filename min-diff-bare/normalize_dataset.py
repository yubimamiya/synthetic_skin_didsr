# -*- coding: utf-8 -*-
"""normalize-dataset.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Y6ZI8l55kEh_VMcm5fLhoLM6Ow4IEHWJ
"""

import os
from os import listdir
from PIL import Image
import numpy as np
import pandas as pd

"""combined standard deviation is the square root (square of all individual standard deviations / total number of images)

combined mean is (add all individual means) / (total number of images)

create two df with three columns, one for each channel. one df is for mean and one is for std. then, calculate all the combined values by extracting each col one at a time.
"""

# create dataframes
mean_df = pd.DataFrame(columns=['R', 'G', 'B'])
std_df = pd.DataFrame(columns=['R', 'G', 'B'])

# load all images and iterate through them one by one

# get the path/directory
folder_dir = '/projects01/VICTRE/yubi.mamiya/minimal-diffusion/datasets/melanoma/ISIC2018_Task1-2_Training_Input/'

# does images go through the images in the folder one by one?
for images in os.listdir(folder_dir):

  if (not images.endswith('.jpg')):
      # only look at image if it is an image file
      continue

  # read in image
  full_img_path = folder_dir + images
  img = Image.open(full_img_path)

  # convert image into numpy array
  numpydata = np.asarray(img)
  # shape is <H, W, C>

  # calculate mean
  mean = np.mean(numpydata, axis=(0, 1))
  # should return 3 vals, one for each channel
  # this is an array

  # calculate std
  # https://numpy.org/doc/stable/reference/generated/numpy.std.html
  std = np.std(numpydata, axis=(0, 1))
  # should return 3 vals, one for each channel

  # append new rows
  mean_df.loc[len(mean_df)] = mean
  std_df.loc[len(std_df)] = std
  # append function has been removed

# calculate avg mean from df

mean_R = mean_df['R'].mean()
mean_G = mean_df['G'].mean()
mean_B = mean_df['B'].mean()

print("mean_R: ", mean_R)
print("mean_G: ", mean_G)
print("mean_B: ", mean_B)

# calculate avg std from df

std_df['square_R'] = (std_df['R'] ** 2)
std_df['square_G'] = (std_df['G'] ** 2)
std_df['square_B'] = (std_df['B'] ** 2)

std_R = std_df['square_R'].sum()
std_G = std_df['square_G'].sum()
std_B = std_df['square_B'].sum()

std_R = (std_R / len(std_df))
std_G = (std_G / len(std_df))
std_B = (std_B / len(std_df))

std_R = (std_R ** 0.5)
std_G = (std_G ** 0.5)
std_B = (std_B ** 0.5)

print("std_R: ", std_R)
print("std_G: ", std_G)
print("std_B: ", std_B)

# calculate overarching std as a sanity check?
std_R_basic = np.std(mean_df['R'])
std_G_basic = np.std(mean_df['G'])
std_B_basic = np.std(mean_df['B'])

print("std_R_basic: ", std_R_basic)
print("std_G_basic: ", std_G_basic)
print("std_B_basic: ", std_B_basic)